package project1.lists;


import java.util.*;



public class DoublyLinkedList<E> implements List<E>  {

	DoublyLinkedNode<E> head;
	DoublyLinkedNode<E> last;
	

	
	public boolean add(E arg0) throws NullPointerException
	{
		//This method Appends the specified element to the end of this list
		
		if (arg0 == null)
			throw new NullPointerException();
		
		DoublyLinkedNode<E> toAdd = new DoublyLinkedNode<E>(arg0, last);
		
		if (head == null)
			head = last = new DoublyLinkedNode<E>(arg0);
		else if (size() == 1)
		{
			head.next = last = new DoublyLinkedNode<E>(arg0, head, null);
			
			
		}
		
		else
			{
			last.next= toAdd; 
			last = toAdd; 
			}
		
		
			
		
		
		return true;
	}

	
	public void add(int indexToAddAt, E arg1) throws NullPointerException, IndexOutOfBoundsException{
		
		if (arg1 == null)
			throw new NullPointerException();
		
		if (indexToAddAt > size() || indexToAddAt < 0)
			throw new IndexOutOfBoundsException();
		
		DoublyLinkedNode<E> node = head;
		
		
		if (isEmpty())
		{
			head = new DoublyLinkedNode<E> (arg1);
			last = head;
		}
		
		
		else
		{
			if (indexToAddAt == 0)
				{
			
			head  = new DoublyLinkedNode<E>(arg1, null, node);
			node.previous = head;
			
			
			
				}
			
			else 
				{
			for (int i = 0; i < indexToAddAt-1; i++)
			{
				node = node.next;
			}
			
			node.setNext(new DoublyLinkedNode<E>(arg1, node, node.next));
			 if (last == node)
			last = node.next;
		
				}
			
		}
		// Fill this portion to complete this method
		// This method Inserts the specified element at the specified position in this list

	}
	
		
			
		
	
	public boolean addAll(Collection<? extends E> arg0) throws NullPointerException {
		
		//This method is done for you
		//This method Appends all of the elements in the specified collection to the end of this list,
		//in the order that they are returned by the specified collectionâ€™s iterator.
		if (arg0 == null)
			throw new NullPointerException();
		
		arg0.forEach(x -> this.add(x));
		
		return true;
	}

	
	
	public boolean addAll(int indexToAddAt, Collection<? extends E> arg1) throws NullPointerException, IndexOutOfBoundsException{
		
		if (arg1 == null)
			throw new NullPointerException();
		
		if (indexToAddAt > size() || indexToAddAt < 0)
			throw new IndexOutOfBoundsException();
		
		var toAdd = new DoublyLinkedList<E>();
	
		toAdd.addAll(arg1);
		var curr = this.head;
		
		
		
		if (indexToAddAt == 0)
		{
			
			this.head = toAdd.head;
			toAdd.last.next = curr;
			curr.previous = toAdd.last;
			
		}
		else if (indexToAddAt == size())
		{
			last.next = toAdd.head;
			toAdd.head.previous = last;
			this.last = toAdd.last;
			
		}
		else {
		for (int i = 0; i < indexToAddAt-1; i++)
		{
			curr  = curr.next;
		}
	
		var node = curr.next;
		curr.next = toAdd.head;
		toAdd.head.previous = curr;
		toAdd.last.next = node;
		}
		
		return true;
	}

	
	
	public void clear()
	{
		//This method removes all of the elements from this list
		//Fill this portion to complete this method
		for (int i = 0; i <= this.size(); i++)
		{
				DoublyLinkedNode<E> node = head.next;
				head = null;
				head = node;	
		}
	}

	// Don't worry about casting, just use equals
	
	
	
	public boolean contains(Object arg0) throws NullPointerException {
		//This method returns true if this list contains the specified element
	
		if (arg0 == null)
			throw new NullPointerException();
		if (this.size() == 0)
			return false;
		
		DoublyLinkedNode<E> curr = head;

		while (curr.hasNextNode()) {
			//Fill this portion to complete this method
			//complete this portion with an If statement and return true
			if (curr.item == arg0)
				return true;
			curr = curr.next;
		}
		return false;

		//return false otherwise
	}


	public E get(int index) throws IndexOutOfBoundsException {
		//This method returns the element at the specified position in this list
	if (index > size() || index < 0)
		throw new IndexOutOfBoundsException();
	
		DoublyLinkedNode<E> node = head;
		for (int i = 0; i < index; i++)
		{
			
			node = node.next;
			
		}
		return node.item;
	}

	
	public int indexOf(Object arg0) throws NullPointerException{
		//This method returns the index of the first occurrence of the specified element in this list
		//or -1 if this list does not contain the element
		////Fill this portion to complete this method
		DoublyLinkedNode<E> node = head;
		
		if (arg0 == null)
			throw new NullPointerException();
		
		if (!node.hasNextNode() && node.item == arg0)
			return 0;
		
		int count = 0;
		while (node.hasNextNode()) {
			

			if (head.item == arg0)
				return 0;
			while (node.hasNextNode())
			{
				if (node.item == arg0)
					return count;
			node = node.next;
			count++;
			}
			
	}
		return -1;
	}

	
	public boolean isEmpty() {
		//just write the return statement and check whether the size is zero or not
		//Hint: you can use this keyword with size() method
		if (this.head == null)
			return true;
		
		else
			return false;
	}

	
	public int lastIndexOf(Object arg0) throws NullPointerException {
		//This method returns the index of the last occurrence of the specified element in this list
		//or -1 if this list does not contain the element
		//Fill this portion to complete this method
		
		if (arg0 == null)
			throw new NullPointerException();
		DoublyLinkedNode<E> node = head;
		int maxCount = -1;
		int count = 0;
	
		while (node.hasNextNode())
		{
			if (node.item == arg0)
				maxCount = count;
		node = node.next;
		count++;
		}
		
		return maxCount;

	}

	
	public boolean remove(Object arg0) throws NullPointerException {
		
		//This method removes the first occurrence of the specified element from this list if it is present
		if (arg0 == null)
			throw new NullPointerException();
		
DoublyLinkedNode<E> p = head;
boolean found = false;

int index = 0;
do
{
	if (p.item.equals(arg0))
	{
		
		remove(index);
		found = true;
		
	}
	p = p.next;
index++;
} while (!found && index < this.size());


	return found;
	}
	
	
	
		//This method removes the element at the specified position in this list
		////Fill this portion to complete this method
		
		public E remove(int indexToRemoveAt) throws IndexOutOfBoundsException {
			
			
			if (indexToRemoveAt >= this.size() || indexToRemoveAt < 0) 
				throw new IndexOutOfBoundsException();
			
			E element = null;
			DoublyLinkedNode<E> p = head;
			if (indexToRemoveAt == 0)
			{
				element = head.item;
				head = head.next;
			}
			else if (indexToRemoveAt == size()-1)
			{
				last = last.previous;
				last.next = null;
				
			} 
			
			else {
			for (int i = 0; i < indexToRemoveAt; i++)
			{
				p = p.next;
			}
			element = p.item;
			
			p.previous.next = p.next;
			p.next.previous = p.previous;
			
			if (p.next == null)
				last = p;
				}
			
			return element;

	}
		

	
	public int size() {
		//This method returns the number of elements in this list
		//Fill this portion to complete this method
DoublyLinkedNode<E> p = head;
int count = 0;
while (p!= null)
	{
	count++;
p = p.next;

	}
	return count;

	}

	
	public List<E> subList(int start, int end)  throws IndexOutOfBoundsException{
		
		if (start < 0 || start > size() || end < 0 || end > size() || start > end) 
			throw new IndexOutOfBoundsException();
		
		List<E> list = new ArrayList<E>();
		var curr = head;
		var index = 0;
		var arrayIndex = 0;
		
			if (curr == null )
				return null;

		while (index < start) {
			//Complete this portion
			curr = curr.getNextNode();
			index++;
		}											// takes the linkedList index up to the sublist starting index

		
		while (index < end && curr != null) {
			//Complete this portion
			list.add(arrayIndex, curr.getItem());
			curr = curr.getNextNode();
			arrayIndex++;
			index++;
		}
		return list;

		//This will return list
	}

	
	public Iterator<E> iterator()
	{
		// TODO Auto-generated method stub
		return new listItr();
	}
		private class listItr implements ListIterator<E>
		
		{
			
			private DoublyLinkedNode<E> cursor = head;
			private int index;
			private int size;
			
			public listItr()
			{
				index = 0;
				size = size();
				cursor = head;
			}
			
			
			@Override
			public boolean hasNext() 
			{
				return index != size;
			}
			@Override
			public E next()
			{
				
				index++;
				E value = cursor.getItem();
				cursor = cursor.getNextNode();
				if (cursor == null)
					cursor = last;
				
				return value;
				
			}
			
			@Override
			public boolean hasPrevious() 
			{
				return index != 0;
				
			}
			
			@Override
			public E previous() 
			{
			
			index--;
			
			E value = cursor.getItem();
			cursor = cursor.getPreviousNode();
			
			
			return value;
				
			}
			@Override
			public int nextIndex() {
				// TODO Auto-generated method stub
				return 0;
			}
			@Override
			public int previousIndex() {
				// TODO Auto-generated method stub
				return 0;
			}
			@Override
			public void remove() {
				// TODO Auto-generated method stub
				
			}
			@Override
			public void set(E e) {
				// TODO Auto-generated method stub
				
			}
			@Override
			public void add(E e) {
				// TODO Auto-generated method stub
				
			}
		
		
		
		}

	
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	
	public <T> T[] toArray(T[] a) {
		// TODO Auto-generated method stub
		return null;
	}


	public E set(int index, E element) throws IndexOutOfBoundsException, NullPointerException {
		// TODO Auto-generated method stub
		if (index > size() || index < 0)
			throw new IndexOutOfBoundsException();
		if  (element == null)
			throw new NullPointerException();
		
		DoublyLinkedNode<E> p = head;
		for (int i = 0; i < index; i++)
		p = p.next;
		p.item = element;
		return element;
	}

	
	public ListIterator<E> listIterator() {
		// TODO Auto-generated method stub
		return  new listItr();
	}

	
	public ListIterator<E> listIterator(int index) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public boolean containsAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	
	public boolean removeAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	
	public boolean retainAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public String toString() {
	if (head == null) {
	return "";
	}
	String result = head.item + ", ";
	DoublyLinkedNode<E> curr = head;

	while (curr.next != null) {
	curr = curr.next;
	result += curr.item + ", ";
	}
	return result;
	}
}

	

